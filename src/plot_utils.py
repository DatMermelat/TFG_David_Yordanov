from typing import Dict, Any, List, Tuple
from collections import defaultdict

import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
import os

from seeslab_utils import clean_folder


def get_plot_fig (data: List[Tuple[Any,Any]], x_label: str = "x", y_label: str = "y", scatter=False):
    data.sort(key=lambda x: x[0])
    x_values, y_values = zip(*data)
    if scatter:
        plt.scatter(x_values, y_values, s=0.8)
    else:
        plt.plot(x_values, y_values)
    # plt.xscale('log')
    plt.yscale('log')
    plt.xlabel(x_label)
    plt.ylabel(y_label)
    plt.title(x_label + "-" + y_label)
    fig = plt.gcf()
    plt.show()
    plt.clf()
    plt.close()
    return fig


def get_hist_fig (data: List[Any], x_label: str = "x", bins = None):
    plt.hist(data, bins = bins, color='blue', alpha=0.7, density = False)
    plt.xscale('log')
    plt.yscale('log')
    plt.xlabel(x_label)
    plt.ylabel("Frequency")
    plt.title(x_label + " distribution")
    fig = plt.gcf()
    plt.show()
    plt.clf()
    plt.close()
    return fig


# Method for overlapping a set of histograms
def overlap_hists(hists: List[List[Any]], path: str, x_label: str = "all_values", stacked: bool = False):
    type = "stacked" if stacked else "overlap"
    hist_path=os.path.join(path, type + "_" + x_label + ".png")

    bins = np.logspace(0, 3, base=10, num=18)
    plt.hist(hists, bins=bins, alpha = 0.7, density = False, stacked=stacked)
    plt.xscale('log')
    plt.yscale('log')
    plt.savefig(hist_path, format="png", dpi=150, bbox_inches='tight')
    plt.show()
    plt.clf()
    plt.close()


# Method for overlappin a set of line-plots
def overlap_plots(plots: list, path: str = None, x_label: str = "x", y_label: str = "y"):
    palette = sns.color_palette("husl", n_colors=len(plots))

    plt.figure(figsize=(10, 6))
    for i, plot in enumerate(plots):
        x_values, y_values = zip(*plot)
        sns.lineplot(x=x_values, y=y_values, label=f"Run {i}", color=palette[i])

    plt.xscale('log')
    plt.yscale('log')

    plt.title(f"{y_label} vs {x_label}")
    plt.xlabel(x_label)
    plt.ylabel(y_label)
    plt.grid(which="both", linestyle="--", linewidth=0.5, alpha=0.7)

    # Saving the plot
    if path:
        plot_path = os.path.join(path, f"{x_label}_{y_label}.png")
        plt.savefig(plot_path, format="png", dpi=150, bbox_inches='tight')
        print(f"Plot saved at: {plot_path}")
    plt.show()
    plt.close()

# Method for plotting any data generated by the plotData methods
def plotData_plot (data: Dict[Any, Any], path: str):
    # Create clean folder to place the plots
    clean_folder(path)

    for key in data:
        if key.startswith("plotData"):
            points = data[key]

            key = key.replace("plotData_", "")
            labels = key.split("_")

            # Plotting and saving
            plot_fig = get_plot_fig(points, labels[0], labels[1])
            plot_path = os.path.join(path, key + ".png")
            plot_fig.savefig(plot_path, format="png", dpi=150, bbox_inches='tight')
            print(f"Plot saved at: {plot_path}")
        elif key.startswith("histData"):
            values = data[key]

            # Specifyng the size of the bins for the histogram
            # max_value = max(values)
            bins = np.logspace(0, 3, base=10, num=18)
            x_label = key.replace("histData_","")

            # Plotting and saving
            hist_fig = get_hist_fig(values, x_label, bins)
            hist_path = os.path.join(path, "hist_" + x_label + ".png")
            hist_fig.savefig(hist_path, format="png", dpi=150, bbox_inches='tight')
            print(f"Histogram saved at: {hist_path}")


def plot_avg(plots: list, path: str = None, x_label: str = "x", y_label: str = "avg_y", scatter = False, ci=95):
    # Flatten the data into a DataFrame
    data = []
    for plot in plots:
        for x, y in plot:
            data.append((x, y))
    df = pd.DataFrame(data, columns=[x_label, y_label])

    # Use seaborn to plot the average with confidence intervals
    plt.figure(figsize=(10, 6))
    if scatter:
        sns.scatterplot(data=df, x=x_label, y=y_label, s=20)
    else:
        sns.lineplot(data=df, x=x_label, y=y_label)

    # plt.xscale('log')
    plt.yscale('log')

    plt.title(f"{y_label} vs {x_label}")
    plt.xlabel(x_label)
    plt.ylabel(y_label)
    plt.grid(which="both", linestyle="--", linewidth=0.5, alpha=0.7)

    # Saving the plot
    if path:
        plot_path = os.path.join(path, f"{x_label}_{y_label}.png")
        plt.savefig(plot_path, format="png", dpi=150, bbox_inches='tight')
        print(f"Plot saved at: {plot_path}")

    plt.show()
    plt.close()